package cn.huang.leetcode;
/*
319. Bulb Switcher

 */

/*
其实第一轮的全开就是每数到一个灯泡时就转换状态。也就是说，对于每个灯泡而言，第i轮，只要i是它的约数，都会让它转换一次状态。初始状态是关，所以要想最后状态是开，那么就需要转换奇数次状态。

一个数的约数一般都是成对出现的，比如1和它本身，如果约数都是成对出现的，最后的转换次数就是偶数，一定是关着的状态。所以只有那些平方数，额外拥有一次单次的转换次数，比如4是2*2,9是3*3，这些数字在遇到2、3的时候都会额外单独转换一次，那最后就一定是关着的，所以我们的目的变成了找1到n中平方数的个数。

我们对n开平方根，会得到小于n的最大的一个平方数的平方根R，而1是最小的一个平方数，其实1~R之间的每个数，平方后都是小于n的，也就是说他们平方后的数都正好是最后状态为开着的灯泡序号。所以1~R之间有多少个数，就表示最后又多少个灯泡是开着的！

所以问题变得很简单，对n开平方根取整就行了！
 */
public class LC_0319_BulbSwitcher {
    public int bulbSwitch(int n) {
        return (int)Math.sqrt(n);
    }
}
