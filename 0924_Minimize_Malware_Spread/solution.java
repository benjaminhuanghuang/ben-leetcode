package cn.huang.leetcode;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

/*
924. Minimize Malware Spread

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least
one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware
will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of
malware stops.

We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If
multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result
of the malware spread.



Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1



Note:

    1 < graph.length = graph[0].length <= 300
    0 <= graph[i][j] == graph[j][i] <= 1
    graph[i][i] = 1
    1 <= initial.length < graph.length
    0 <= initial[i] < graph.length


 */
public class LC_0924_MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int min_affected = Integer.MAX_VALUE;
        int min_node = -1;
        Arrays.sort(initial);

        for (int t : initial) {
            int[] bad = new int[graph.length];
            Queue<Integer> q = new LinkedList<>();
            for (int n : initial)
                if (n != t) {
                    bad[n] = 1;
                    q.offer(n);
                }
            int affected = initial.length - 1;
            while (!q.isEmpty()) {
                int size = q.size();
                while (size-- > 0) {
                    int n = q.poll();
                    for (int i = 0; i < graph[n].length; ++i) {
                        if (graph[n][i] == 0 || bad[i] > 0)
                            continue;
                        ++affected;
                        bad[i] = 1;
                        q.offer(i);
                    }
                }
            }
            if (affected < min_affected) {
                min_affected = affected;
                min_node = t;
            }
        }
        return min_node;
    }
}
