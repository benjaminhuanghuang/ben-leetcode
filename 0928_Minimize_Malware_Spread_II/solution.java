package cn.huang.leetcode;

import java.util.*;

/*
928. Minimize Malware Spread II

(This problem is the same as Minimize Malware Spread, with the differences bolded.)

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of
those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue
until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of
malware stops.

We will remove one node from the initial list, completely removing it and any connections from this node to any other
node.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize
M(initial), return such a node with the smallest index.



Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:

Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1

Example 3:

Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1



Note:

    1 < graph.length = graph[0].length <= 300
    0 <= graph[i][j] == graph[j][i] <= 1
    graph[i][i] = 1
    1 <= initial.length < graph.length
    0 <= initial[i] < graph.length


 */
public class LC_0928_MinimizeMalwareSpread_II {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Set<Integer> initialSet = new HashSet<>();
        for (int node : initial) {
            initialSet.add(node);
        }
        Map<Integer, Integer> uniqueSourceMap = new HashMap<>();
        Set<Integer> uniqueSourceSet = new HashSet<>();
        for (int node : initial) {
            Set<Integer> visited = new HashSet<>();
            Queue<Integer> queue = new LinkedList<>();
            queue.add(node);
            while (queue.size() > 0) {
                int v = queue.poll();
                visited.add(v);

                if (!uniqueSourceSet.contains(v)) {
                    uniqueSourceSet.add(v);
                    uniqueSourceMap.put(v, node);
                } else {
                    uniqueSourceMap.remove(v);
                }

                for (int i = 0; i < graph.length; ++i) {
                    if (graph[v][i] == 1 && !initialSet.contains(i) && !visited.contains(i)) {
                        queue.add(i);
                    }
                }
            }
        }
        int[] countTable = new int[graph.length];
        int maxi = 0;

        for (Map.Entry<Integer, Integer> entry : uniqueSourceMap.entrySet()) {
            int i = entry.getValue();
            countTable[i]++;
            if (countTable[i] > countTable[maxi]) maxi = i;
            else if (countTable[i] == countTable[maxi] && i < maxi) maxi = i;
        }
        return maxi;
    }
}
